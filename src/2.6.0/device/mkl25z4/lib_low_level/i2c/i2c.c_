#include "i2c.h"

// ---------------------------------------------------------------------------
// I2C bus control functions
//
inline void i2c_set_tx(I2C_MemMapPtr p)     {p->C1 |= I2C_C1_TX_MASK;}
inline void i2c_set_rx(I2C_MemMapPtr p)     {p->C1 &= ~I2C_C1_TX_MASK;}
inline void i2c_set_slave(I2C_MemMapPtr p)  {p->C1 &= ~I2C_C1_MST_MASK;}
inline void i2c_set_master(I2C_MemMapPtr p) {p->C1 |=  I2C_C1_MST_MASK;}
inline void i2c_give_nack(I2C_MemMapPtr p)  {p->C1 |= I2C_C1_TXAK_MASK;}
inline void i2c_give_ack(I2C_MemMapPtr p)   {p->C1 &= ~I2C_C1_TXAK_MASK;}
inline void i2c_repeated_start(I2C_MemMapPtr p){p->C1     |= I2C_C1_RSTA_MASK;}
inline uint8_t i2c_read(I2C_MemMapPtr p)    {return p->D;}

inline void i2c_start(I2C_MemMapPtr p)
{
    i2c_set_master(p);
    i2c_set_tx(p);
}

inline void i2c_stop(I2C_MemMapPtr p)
{
    i2c_set_slave(p);
    i2c_set_rx(p);
}

inline void i2c_wait(I2C_MemMapPtr p)
{
    // Spin wait for the interrupt flag to be set
    while((p->S & I2C_S_IICIF_MASK) == 0)
        __asm("nop"); 
    p->S |= I2C_S_IICIF_MASK;           // Clear flag
}

inline int i2c_write(I2C_MemMapPtr p, uint8_t data)
{
    // Send data, wait, and return ACK status
    p->D = data;
    i2c_wait(p);
    return ((p->S & I2C_S_RXAK_MASK) == 0);
}


void i2c_init_(I2C_MemMapPtr p)
{
    /*
    SIM_BASE_PTR->SCGC5 = SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTE_MASK;
    SIM_BASE_PTR->SCGC4 |= SIM_SCGC4_I2C0_MASK;
    PORTE_PCR24 = PORT_PCR_MUX(5);
    PORTE_PCR25 = PORT_PCR_MUX(5);
    // p->F  = 0x14;
    p->F  = 0x12;
    p->C1 = I2C_C1_IICEN_MASK;

    return;
    */

    /* enable clock gating to I2C0 */
    #if !I2C_USE_BME
    SIM_BASE_PTR->SCGC4 |= (1 << SIM_SCGC4_I2C0_SHIFT) & SIM_SCGC4_I2C0_MASK;
    #else
    BME_OR_W(&SIM->SCGC4, (1 << SIM_SCGC4_I2C0_SHIFT) & SIM_SCGC4_I2C0_MASK);
    #endif
    #if 0 /* in ancient times this was hardcoded */

    /* enable the clock gate to port E */
    #if !I2C_USE_BME
    SIM->SCGC5 |= (1 << SIM_SCGC5_PORTE_SHIFT) & SIM_SCGC5_PORTE_MASK;
    #else
    BME_OR_W(&SIM->SCGC5, (1 << SIM_SCGC5_PORTE_SHIFT) & SIM_SCGC5_PORTE_MASK);
    #endif

    /* configure port E pins to I2C operation */
    PORTE->PCR[24] = PORT_PCR_MUX(5); /* SCL */
    PORTE->PCR[25] = PORT_PCR_MUX(5); /* SDA */
    #endif

    /* configure the I2C clock */
    /*
    * I2C0 is clocked by the bus clock, that is core/2.
    * For the MMA8451Q inertial sensor on the FRDM-25KLZ board the
    * maximum SCL frequency is 400 kHz.
    * Assuming PEE mode with core=48MHz, 400 kHz = 48MHz/2 / 60,
    * which means a prescaler (SCL divider) of 60.
    * According to table 38-41, I2C divider and hold values,
    * the closest SCL diver is 64 (375 kHz SCL), which is ICR value 0x12.
    * Alternatively, the SCL divider of 30 can be used (ICR=0x05) in combination
    * with a multiplicator of 2 (MULT=0x01).
    * A note states that ICR values lower than 0x10 might result in a varying
    * SCL divider (+/- 4). However the data sheet does not state anything
    * useful about that.
    */
    #if ENABLE_SPEEDHACK
    p->F = I2C_F_MULT(0x01) | I2C_F_ICR(0x05); /* NOTE: According to KINETIS_L_2N97F errata (e6070), repeated start condition can not be sent if prescaler is any other than 1 (0x0). */
    #else
    p->F = I2C_F_MULT(0x00) | I2C_F_ICR(0x12); /* divide by 64 instead, so 375 kHz */
    #endif

    /* enable the I2C module */
    p->C1 = (1 << I2C_C1_IICEN_SHIFT) & I2C_C1_IICEN_MASK;
}

void i2c_0_init()
{
    i2c_init_(I2C0_B);
}





u8 i2c_read_reg(I2C_MemMapPtr p, u8 dev_addr, u8 reg_addr)
{
    timer_delay_loops(100000);

    i2c_start(p);
    i2c_write(p, dev_addr | I2C_WRITE);
    i2c_write(p, reg_addr);
    i2c_repeated_start(p);
    i2c_write(p, dev_addr | I2C_READ);
    i2c_set_rx(p);
    i2c_give_nack(p);
    i2c_read(p);
    i2c_wait(p);
    i2c_stop(p); 
    return i2c_read(p);
}


void i2c_write_reg(I2C_MemMapPtr p, u8 dev_addr, u8 reg_addr, u8 data)
{  
    timer_delay_loops(100000);

    i2c_start(p);
    i2c_write(p, dev_addr | I2C_WRITE);
    i2c_write(p, reg_addr);
    i2c_write(p, data);
    i2c_stop(p);
}